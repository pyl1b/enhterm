# -*- coding: utf-8 -*-
"""
Contains the definition of the Message class.
"""
import logging
from collections import OrderedDict

logger = logging.getLogger('et.m')


class Paragraph(object):
    """ A paragraph in a message. """
    def __init__(self, message=None, *args, **kwargs):
        """
        Constructor.

        Arguments:
            message (Message):
                The message where this paragraph belongs to.
        """
        super().__init__(*args, **kwargs)


class TextParagraph(Paragraph):
    """ A text paragraph in a message. """
    def __init__(self, text='', *args, **kwargs):
        """
        Constructor.

        Arguments:
            text (str):
                The contents of the paragraph.
        """
        super().__init__(*args, **kwargs)
        self.text = text

    def __str__(self):
        """ Represent this object as a human-readable string. """
        return self.text

    def __repr__(self):
        """ Represent this object as a python constructor. """
        return f'TextParagraph({self.text})'


class Message(object):
    """
    This class represents a message generated by the terminal.

    Attributes:
        term (EnhTerm):
            The terminal that generated this message.
        severity (int):
            The severity of this message. One of the logging constants
            can be used here.
        paragraphs (list of Paragraph):
            The list of paragraphs that compose this message.
    """

    def __init__(self, term=None, severity=logging.INFO, paragraphs=None,
                 *args, **kwargs):
        """
        Constructor.

        Arguments:
            term (EnhTerm):
                The terminal that generated this message.
            severity (int):
                The severity of this message. One of the logging constants
                can be used here.
            paragraphs (list of Paragraph):
                The list of paragraphs that compose this message.
        """
        super().__init__(*args, **kwargs)
        self.term = term
        self.severity = severity
        self.paragraphs = [] if paragraphs is None else paragraphs

    def __str__(self):
        """ Represent this object as a human-readable string. """
        return 'Message()'

    def __repr__(self):
        """ Represent this object as a python constructor. """
        return 'Message()'
